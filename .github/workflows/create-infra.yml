name: "Create Infra"
on: workflow_dispatch
# on:
#   push:
#     branches:
#       - stage
#     paths:  
#       - terraform/**
#   pull_request:
#     branches:
#       - main
#     paths:
#       - terraform/**
env:
    ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
    ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
    ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
    ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
    TF_BACKEND_RESOURCE_GRP: "${{ secrets.AZURE_TRF_RSG }}"
    TF_BACKEND_STORAGE_ACCOUNT: "${{ secrets.AZURE_TRF_STORAGE_ACCOUNT }}"
    TF_BACKEND_CONTAINER_NAME: "${{ secrets.AZURE_TRF_CONTAINER_NAME }}"
    TF_BACKEND_KEY: "${{ secrets.AZURE_TRF_KEY_TFSTATE }}"
    K8S_RESOURCE_GRP: "${{ secrets.AZURE_K8S_RSG }}"
    K8S_REGION: "${{ secrets.AZURE_K8S_REGION }}"
    K8S_CLUSTER_NAME: "${{ secrets.AZURE_K8S_CLUSTER_NAME }}"
    

jobs:
   terraform:
     name: "Apply terraform code changes"
     runs-on: ubuntu-latest
     defaults:
       run:
         #shell: bash
         working-directory: ./terraform

     steps:

        - name: Checkout source code
          uses: actions/checkout@v4

        # - name: Log in with Azure
        #   uses: azure/login@v1
        #   with:
        #     creds: '${{ secrets.AZURE_CREDENTIALS }}'

        # - name: Message after Login
        #   run: echo Hello, world! Logged in to Azure

        - name: Setup Terraform with specified version on the runner
          uses: hashicorp/setup-terraform@v3

        - name: Terraform init
          id: init
          run: terraform init -backend-config=resource_group_name="${{ env.TF_BACKEND_RESOURCE_GRP }}" -backend-config=storage_account_name="${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" -backend-config=container_name="${{ env.TF_BACKEND_CONTAINER_NAME }}" -backend-config=key="${{ env.TF_BACKEND_KEY }}"

        - name: Terraform format
          id: fmt
          run: terraform fmt -check

        - name: Terraform validate
          id: validate
          run: terraform validate

        - name: Terraform plan
          id: terra_plan
          run: terraform plan -var=resource_group_name="${{ env.K8S_RESOURCE_GRP }}" -var=region="${{ env.K8S_REGION }}" -var=client_id="${{ env.ARM_CLIENT_ID }}" -var=client_secret="${{ env.ARM_CLIENT_SECRET }}" -var=cluster_name="${{ env.K8S_CLUSTER_NAME }}" -no-color -input=false -out planfile
          continue-on-error: true

        - name: Terraform plan status
          if: steps.terra_plan.outcome == 'failure' 
          run: exit 1

        - name: Terraform Apply
          id: terra_apply
          #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          run: terraform apply -auto-approve -input=false -parallelism=1 planfile